library(usethis)
# Create a package skeleton named unitConverter
create_package("unitConverter")
# View and check the R package directory
dir(".")
library(usethis)
# View and check the R package directory
dir(".")
# Read in distance data
library(readr)
distance_data <- read_csv("data-raw/distance_data.csv")
# Print the first six rows of distance_data
head(distance_data,6)
# Add the distance data to the R package
use_data(distance_data)
# Make an R Markdown template file
use_rmarkdown_template("Distance Conversion Examples")
knitr::opts_chunk$set(echo = TRUE)
git init
# Define the dist_converter function
dist_converter <- function(dist_value, unit_from, unit_to) {
# Fill in the missing parts of the if-else if-else flow
if (unit_from == "feet" && unit_to == "meters") {
return(dist_value / 3.28)
} else if (unit_from == "meters" && unit_to=="feet") {
return(dist_value * 3.28)
} else if (unit_from == unit_to) {
warning("unit_from and unit_to are the same, returning dist_value")
return(dist_value)
} else {
stop("This function only supports conversions between feet and meters.")
}
}
# Use dist_converter to convert 100 meters to feet
dist_converter(100, unit_from="meters", unit_to="feet")
# Save the dist_converter function to an R file using base R
dump("dist_converter", file="R/dist_converter.R")
library(devtools)
# isntall the R package and ry it out
devtools::install()
# Call the dist_converter function from the unitConverter package
unitConverter:::dist_converter(dist_value = distance_data$value[2],
# Access the second row for unit
unit_from = distance_data$unit[2],
unit_to = "feet")
usethis::use_mit_license()
# add weight_converter function
function(weight_value, unit_from, unit_to) {
# Conversion factors for different weight units
conversion_factors <- c(gram = 1, kilogram = 1000,
pound = 453.592, ounce = 28.3495)
# Convert value from the unit_from to gram
in_grams <- weight_value * conversion_factors[unit_from]
# Convert value from gram to the unit_to
return(unname(in_grams / conversion_factors[unit_to]))
}
dump("weight_converter", file="R/weight_converter.R")
weight_converter <- function(weight_value, unit_from, unit_to) {
# Conversion factors for different weight units
conversion_factors <- c(gram = 1, kilogram = 1000,
pound = 453.592, ounce = 28.3495)
# Convert value from the unit_from to gram
in_grams <- weight_value * conversion_factors[unit_from]
# Convert value from gram to the unit_to
return(unname(in_grams / conversion_factors[unit_to]))
}
weight_converter
dump("weight_converter", file="R/weight_converter.R")
# test it
weight_converter(100, unit_from = "kilogram", unit_to = "pound")
# Import package files to current R session
devtools::load_all()
# set package dependencies
# Suggest ggplot2 >= 3.0.0
usethis::use_package(ggplot2, type = "suggest", min_version = "3.0.0")
# set package dependencies
# Suggest ggplot2 >= 3.0.0
usethis::use_package("ggplot2", type = "suggest", min_version = "3.0.0")
# Documentation with roxygen2
# add roxygen comment #' in function header of each function.R in R folder
# then, call:
library(roxygen2)
roxygenize()
?dist_converter()
roxygenize()
load_all()
rm(list=c("dist_converter"))
roxygenize()
?dist_converter()
?browseVignettes
# create vignettes for the package
browseVignettes("ggplot2")
use_vignette("dist_conversion", title = "Distance Conversion Examples")
dist_result <- dist_converter(dist_value=5, unit_from="feet", unit_to="meters")
dist_result
library(unitConverter)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(unitConverter)
dist_result <- dist_converter(dist_value = 5, unit_from = "feet", unit_to="meters")
unlink("vignettes/dist_conversion_cache", recursive = TRUE)
dist_result <- dist_converter(dist_value = 5, unit_from = "feet", unit_to="meters")
dist_result <- dist_converter(dist_value = 5, unit_from = "feet", unit_to="meters")
dist_result <- dist_converter(dist_value = 5, unit_from = "feet", unit_to="meters")
# Import package files to current R session, This will indicate if there is error in package functions
devtools::load_all()
knit_with_parameters("~/Documents/my_packages/unitConverter/vignettes/dist_conversion.Rmd")
knit_with_parameters("~/Documents/my_packages/unitConverter/vignettes/dist_conversion.Rmd")
dist_result <- dist_converter(dist_value = 5, unit_from = "feet", unit_to="meters")
devtools::install_git("unitCoverter")
library(unitConverter)
# now, build vignette
build_vignettes()
# Unit testing, is important for catching bugs and validate its functionality!
use_testthat()
# create test file
use_test()
library(usethis)
library(devtools)
# Read in distance data
library(readr)
# isntall the R package and try it out
devtools::install()
# create test file
use_test()
usethis::use_test(open = rlang::is_interactive())
library(usethis)
library(devtools)
# View and check the R package directory
dir(".")
# Read in distance data
library(readr)
# Print the first six rows of distance_data
head(distance_data,6)
# Add the distance data to the R package
use_data(distance_data)
# Use dist_converter to convert 100 meters to feet
dist_converter(100, unit_from="meters", unit_to="feet")
# isntall the R package and try it out
devtools::install()
library(unitConverter)
# test it
weight_converter(100, unit_from = "kilogram", unit_to = "pound")
# Import package files to current R session, This will indicate if there is error in package functions
devtools::load_all()
# test it
weight_converter(100, unit_from = "kilogram", unit_to = "pound")
# Unit testing, use_testthat() creates the testing framework
# It is important for catching bugs and validate its functionality!
use_testthat()
# create test file
use_test()
getwd()
# create test file
use_test()
# create test file
use_test()
# Unit testing, use_testthat() creates the testing framework
# It is important for catching bugs and validate its functionality!
use_testthat()
rlang::last_trace()
rlang::last_trace(drop=FALSE)
# create test file
use_test()
# create test file
use_test(test-dist_converster.R)
# create test file
use_test("test-dist_converster.R")
# Import package files to current R session, This will indicate if there is error in package functions
devtools::load_all()
# create test file
use_test("dist_converster.R")
use_test("weight_converter.R")
# Convert an example into a test
# Review the example
dist_converter(100, unit_from = "meters", unit_to = "feet")
expect_equal(dist_converter(100, unit_from = "meters", unit_to = "feet"), 328)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
# Convert the example to a unit test comparing sameness
expect_equal(dist_converter(100, unit_from = "meters", unit_to = "feet"), 328)
expect_warning(dist_converter(25, unit_from = "feet", unit_to = "feet"))
# Error for cold feet
expect_error(dist_converter("cold", unit_from="feet", unit_to="meters"))
# Error for cold feet
expect_error(dist_converter("cold", unit_from="feet", unit_to="meters"))
dist_converter()
dist_converter
test_file("test/testthat/")
test_file(path="test/testthat/")
test_file(path="test/testthat/test-dist_converter.R")
test_file(path="~test/testthat/test-dist_converter.R")
test_file(path="~/test/testthat/test-dist_converter.R")
test_file(path="~//test/testthat/test-dist_converter.R")
# use_testthat() creates the testing framework
# It is important for catching bugs and validate its functionality!
library(testthat)
test_file("test-dist_converter.R")
library(here)
test_file(here("/tests/testthat/test-dist_converter.R"))
here("/tests/testthat/test-dist_converter.R")
library(here)
test_file(here("/tests/testthat/", "test-dist_converter.R"))
# add roxygen comment #' in function header of each function.R in R folder (see dist_converter.R)
# then, call:
library(roxygen2)
roxygenize() # this will create help file in the man directory!
?dist_converter
test_example("man/dist_converter.Rd")
test_file("test/testthat.R")
# create test file
use_test("dist_converter.R")
test_file("test/testthat/test_converter.R")
test_file("/test/testthat/test_converter.R")
test_file("./test/testthat/test_converter.R")
test_file("~./test/testthat/test_converter.R")
test_file("test/testthat/test-dist_converter.R")
test_file("/test/testthat/test-dist_converter.R")
test_file("~/test/testthat/test-dist_converter.R")
test_file("~./test/testthat/test-dist_converter.R")
test_file("./test/testthat/test-dist_converter.R")
test_file("/test/testthat/test-dist_converter.R")
test_file("/tests/testthat/test-dist_converter.R")
test_file("tests/testthat/test-dist_converter.R")
test_example("man/dist_converter.Rd")
library(usethis)
library(devtools)
# View and check the R package directory
dir(".")
library(unitConverter)
# Use dist_converter to convert 100 meters to feet
dist_converter(100, unit_from="meters", unit_to="feet")
# Import package files to current R session, This will indicate if there is error in package functions
devtools::load_all()
# Run all package tests
test_package("unitConverter")
test_package
# use_testthat() creates the testing framework
# It is important for catching bugs and validate its functionality!
library(testthat)
# create R/distance_data.R file to describe the data in the package (if any)
use_r("distance_data")
# After adding above description for data file, run roxynize to add Rd file in man(manual)
roxygenize()
# After adding above description for data file, run roxynize to add Rd file in man(manual)
roxygen2::roxygenize()
?distance_data
distance_data
# Note that this exercise will take up to 30 seconds to initialize.
# It could take up to 15 seconds to run your code too. Be patient and you'll get all the lovely messages
# with a summary at the end of your package's assessment.
# Assess the package
devtools::check()
